Problem link: https://leetcode.com/problems/serialize-and-deserialize-binary-tree/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string ans="";
        if(root==NULL)
        {
            return ans;
        }
        queue<TreeNode*>q;
        q.push(root);
        ans+=to_string(root->val)+ ",";
        int count=1;
        while(!q.empty())
        {
            while(!q.empty() && count--)
            {
                TreeNode* temp = q.front();
                q.pop();
                if(temp->left!=NULL)
                {
                    q.push(temp->left);
                    ans+=to_string(temp->left->val)+ ",";
                }
                else
                {
                    ans+="x,";
                }
                if(temp->right!=NULL)
                {
                    q.push(temp->right);
                    ans+=to_string(temp->right->val)+ ",";
                }
                else
                {
                    ans+="x,";
                } 
            }
            count=q.size();
        }
        cout<<ans;
        return ans;
        
    }

    // Decodes your encoded data to tree.
    //1, 2, 3, bla, bla, 4, 5, bla, bla, bla, bla, 
    TreeNode* deserialize(string data) {
        if(data=="")
        {
            return NULL;
        }
        stringstream s(data);
        cout<<endl;
        string token;
        getline(s, token, ',');
        TreeNode *root = new TreeNode(stoi(token));
        queue<TreeNode*> q; 
        q.push(root); 
        while(!q.empty()) {
            
            TreeNode *node = q.front(); 
            q.pop(); 
            
            getline(s, token, ',');
            if(token == "x") {
                node->left = NULL; 
            }
            else {
                TreeNode* leftNode = new TreeNode(stoi(token)); 
                node->left = leftNode; 
                q.push(leftNode); 
            }
            
            getline(s, token, ',');
            if(token == "x") {
                node->right = NULL; 
            }
            else {
                TreeNode* rightNode = new TreeNode(stoi(token)); 
                node->right = rightNode;
                q.push(rightNode); 
            }
        }
        return root; 
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
