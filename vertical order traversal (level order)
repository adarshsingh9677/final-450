Problem link:  https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void traverse(TreeNode* root, map<int, map<int, multiset<int> > > &store,int vertical,int level)
    {
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        int curr=1,c=0;
        while(!q.empty())
        {
            c=0;
            while(!q.empty() && curr--)
            {
                TreeNode*temp=q.front().first;
                int vertical=q.front().second;
                q.pop();
                store[vertical][level].insert(temp->val);
                if(temp->left!=NULL)
                {
                    q.push({temp->left,vertical-1});
                    c++;
                }
                if(temp->right!=NULL)
                {
                    q.push({temp->right,vertical+1});
                    c++;
                }
            }
            curr=c; 
            level++;
        }
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int, map<int, multiset<int> > > store;
        traverse(root, store,0,0);
        
        for(auto vertical: store)
        {
            vector<int> temp;
            for(auto level: vertical.second)
            {
                
                for(auto value: level.second)
                {
                    temp.push_back(value);
                }
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
