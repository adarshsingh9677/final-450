Problem link: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void traverse(TreeNode* root, map<int, map<int, multiset<int> > > &store,int vertical,int level)
    {
        if(root==NULL)
        {
            return;
        }
        store[vertical][level].insert(root->val);
        traverse(root->left,store,vertical-1,level+1);
        traverse(root->right,store,vertical+1,level+1);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int, map<int, multiset<int> > > store;
        traverse(root, store,0,0);
        
        for(auto vertical: store)
        {
            vector<int> temp;
            for(auto level: vertical.second)
            {
                
                for(auto value: level.second)
                {
                    temp.push_back(value);
                }
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
