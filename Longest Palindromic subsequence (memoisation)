Problem link:  https://leetcode.com/problems/longest-palindromic-subsequence/


class Solution {
public:
    
    int lcs(string &s1, string &s2, int m, int n,vector<vector<int>> &dp)
    {
        if(m<0 || n<0)
        {
            return 0;
        }
        if(dp[m][n]!=-1)
        {
            return dp[m][n];
        }
        if(s1[m]==s2[n])
        {
            return dp[m][n]=1+lcs(s1,s2,m-1,n-1,dp);
        }
        return dp[m][n] = max(lcs(s1,s2,m-1,n,dp), lcs(s1,s2,m,n-1,dp));
    }
    int longestPalindromeSubseq(string s) {
        string s1=s;
        reverse(s.begin(),s.end());
        string s2=s;
        int m,n;
        m=n=s1.size();
        vector<vector<int>> dp(m,vector<int> (n,-1));
        return lcs(s1,s2,m-1,n-1,dp);
    }
};
