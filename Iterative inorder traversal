Problem link: https://leetcode.com/problems/binary-tree-inorder-traversal/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans; 
        if(root==NULL)
            return ans;
        stack<pair<TreeNode*,int> > st;
        st.push({root,1});
        while(!st.empty())
        {
            TreeNode* top = st.top().first;
            int state = st.top().second;
            if(state==1)
            {
                st.top().second++;
                if(top->left!=NULL)
                {
                    st.push({top->left,1});
                }
            }
            else if(state==2)
            {
                ans.push_back(top->val);
                st.top().second++;;
                if(top->right!=NULL)
                {
                    st.push({top->right,1});
                }
            }
            else if(state==3)
            {
                st.pop();
            }
        }
        return ans;
    }
};
