Problem link: https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/



class Solution {
public:
    int ind;
    TreeNode* build(vector<int>& postorder, vector<int>& inorder,unordered_map<int,int> &in,  int l,int r)
    {
        if(l>r)
        {
            return NULL;
        }
        int currelempos = in[postorder[ind]];
        TreeNode* currnode = new TreeNode(postorder[ind--]);
        if(l==r)
        {
            return currnode;
        }
        currnode->right = build(postorder,inorder,in,currelempos+1,r);
        currnode->left = build(postorder,inorder,in,l,currelempos-1);
        return currnode;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int> in;
        for(int i=0;i<inorder.size();i++)
        {
            in[inorder[i]]=i;
        }
        ind= postorder.size()-1;
        TreeNode* node = build(postorder,inorder,in,0,postorder.size()-1);
        return node;
    }
};
   
