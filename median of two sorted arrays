Problem link: https://leetcode.com/problems/median-of-two-sorted-arrays/


class Solution {
public:
    double get_median(vector<int> &nums)
    {
        int n=nums.size();
        if(n%2==0)
        {
            return double(nums[n/2]+nums[(n/2)-1])/2.0;
        }
        return double(nums[n/2]);
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int cut1,cut2;
        int n=nums1.size(),m=nums2.size();
        if(n>m)
        {
            return findMedianSortedArrays(nums2,nums1);
        }
        int low=0,high=n;
        double ans=0;
        if(n==0)
        {
            return get_median(nums2);
        }
        if(m==0)
        {
            return get_median(nums1);
        }
        while(low<=high)
        {
            cut1=(low+high)>>1;
            cut2=((n+m)+1)/2-cut1;
            int l1 = (cut1 == 0)? INT_MIN:nums1[cut1-1];
            int l2 = (cut2 == 0)? INT_MIN:nums2[cut2-1];
            int r1 = (cut1 == n)? INT_MAX:nums1[cut1];
            int r2 = (cut2 == m)? INT_MAX:nums2[cut2];

            if(l1<=r2 && l2<=r1)
            {
                if((m+n)%2==0)
                    return ((double)max(l1,l2)+(double)min(r1,r2))/2.0;
                else
                    return (double)max(l1,l2);
            }
            if(l1>r2)
            {
                high=cut1-1;
            }
            else
            {
                low=cut1+1;
            }
        }
        return 0.0;
    }
};
