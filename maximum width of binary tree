Problem link: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int widthOfBinaryTree(TreeNode* root) {
        unsigned int ans=0;
        if(root==NULL)
            return ans;
        unsigned int count=1,c=0;
        queue< pair< TreeNode*,long long> > q;
        q.push({root,1});
        unsigned int startind=1,endind=1;
        while(!q.empty())
        {
            startind=q.front().second;
            endind=q.back().second;
            ans=max(ans,endind-startind+1);
            while(!q.empty() && count--)
            {
                TreeNode* temp = q.front().first;
                unsigned int index = q.front().second;
                q.pop();
                if(temp->left!=NULL)
                {
                    q.push({temp->left,2*index});
                    c++;
                }
                if(temp->right!=NULL)
                {
                    q.push({temp->right,2*index+1});
                    c++;
                }
            }
            count=c;
            c=0;
        }
        return ans;
    }
};
